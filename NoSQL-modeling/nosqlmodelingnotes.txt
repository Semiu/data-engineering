Basics of NoSQL (Non-relational) database design:
Good when there is need for high availability in the data - system always up and no downtime. There is large amount of
data. Needs linear scalability, i.e. adding more nodes to the syste, to improve the performance linearly. Low latency, meaning
there is a shorter delay before the data is transfered once the instruction for the transfer has been received.
And lastly, where there is need for fast reads and write.

Apache Cassandra is (a) open-source, (b) masterless architecture, (c) high availability, (d) linearly scalable. Created to
meet big data challenges that RDBs are failing to solve
(Documentation: https://docs.datastax.com/en/archived/cassandra/3.0/cassandra/dml/dmlIntro.html)
(https://docs.datastax.com/en/archived/cassandra/3.0/cassandra/architecture/archTOC.html)
(https://www.tutorialspoint.com/cassandra/cassandra_architecture.htm)
(https://docs.datastax.com/en/dseplanning/docs/capacityPlanning.html)

Though deployment strategies can be affected by the size of the data and the data model, they do not have serious 
connections. 

The CAP theorem: It is impossible for a distributed data store to simulatenously provide more than two out of the three 
guarantees of consistency, availability and partition tolerance.

Consistency - Every read from the database gets latest and correct pience of data or an error. 
Availability - Every request is received and a response is given - without a guarantee that the data is the latest update.
Partition tolerance - The system continues to work regardless of losing network connectivity between nodes.

Apache cassandra chooses to be highly available at the cost of consistency. But it makes it up with eventual consistency.

(Discussion about ACID vs CAP: https://www.voltactivedata.com/blog/2015/10/acid-vs-cap/)

Denormalization in Apache Cassandra is critical. It is a must. Modeling must be done by thinking firstly about the 
queries to be performed. There are no JOINS in Apache Cassandra. One table per query is the great strategy. Apache 
Cassandra is optimized for fast writes. But for fast reads, it has to be planned with good data modeling.

CQL -Cassandra Query Language, it mimics SQL, but it has no JOINS, GROUP BY or sub queries.

Primary keys - How each row can be uniquely identified and the data distributed across the nodes in our system. The first
element of the primary key is the partition key, which will determine the distribution. In other words, where the "WHERE"
clause is. The primary key is made up of either just the partition key or with the addition of the clustering columns.
Primary keys must be unique to each row

The partition key row value will be hashed (turned into a number) and stored on the node in the system holding the range
of values.

Clustering columns - Note that the primary key is made up of just the partition key (the filtering column of the WHERE 
clause) or the clustering columns. The clustering colum determines the sort order within a partition (ascending). More 
than one clustering column can be added. Use the clustering columns ONLY in order, when used in the SELECT statement

WHERE clause - Data modeling in Cassandara is query focused. Therefore, the focus needs to be on the WHERE clause. 
The partition key must be included in the query and the clustering columns in the order they appear in the primary key.
The WHERE clause must be included to execute queries for low latency and high performance. Recommended that one partition at a time for performance
implications. SELECT * from a table is allowed if ALOW FILTERING configuration, but highly discouraged.
Also, the columns in the WHERE clause should be arranged in the order they are created in the data model. Any column can
only be added after all these have been used in the WHERE clause of the query.
